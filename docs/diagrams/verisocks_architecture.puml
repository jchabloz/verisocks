@startuml verisocks_architecture
' title Verisocks architecture overview
' footer "Copyright (c) Jérémie Chabloz - 2022"

!include <tupadr3/font-awesome-5/server>
!include <tupadr3/font-awesome-5/python>
!include <tupadr3/font-awesome-5/robot>
!include <tupadr3/font-awesome-5/database>
!include <tupadr3/font-awesome-5/cogs>
!include <tupadr3/font-awesome-5/file_code>
!include <tupadr3/font-awesome-5/code>
!include <tupadr3/font-awesome-5/microchip>

skinparam NoteBackgroundColor AliceBlue
skinparam ComponentStyle rectangle
skinparam DefaultFontName Helvetica

frame "PLI application" {
    rectangle "PLI routine" {
        rectangle "<$server>\nServer" as tcp_server
    }
}
    
file "<$database>\nTB\nconfig" as cfg_tb
file "<$database>\nDUT\nconfig" as cfg_dut
file "<$file_code>\nFirmware" as fw


frame "Verilog simulator" as sim {
    rectangle "Verilog testbench" as tb {
        [<$microchip>\nDUT] as dut
        rectangle {
            [User defined\nsystem task (PLI)\n""$verisocks_init()""] as task
        }
    }
}

cfg_tb .right.> tb
cfg_dut .up.> dut

frame "Test framework" as client {
    [<$python>\nClient] as tcp_client
    [<$robot>\nTest\nframework] as tcms
}

note top of tcp_client
Any language or tool allowing
usage of TCP sockets can be
used to write a suitable client
endnote

note bottom of tcms
Test case management system,
automated or manual, such as
Robot, pytest, Kiwi, etc.
endnote

note bottom of tcp_server
C program using
BSD socket.
Only accepts a single
connection at a time.
endnote

note top of task
User-defined task
called in an ""initial""
block
endnote

task <--> dut
task <-> tcp_server : VPI
tcp_server <-> tcp_client : TCP/IP
tcms <-left-> tcp_client

fw .up.> dut

@enduml